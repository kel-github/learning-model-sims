} else if (choice == "orange"){
idx = 2
}
outcome = sample(c(1, 0), 1, prob = choice_probs[, idx])
}
###############################################################################################################################
# now define parameters for simulation
###############################################################################################################################
# define the model parameters
# I have chosen to randomly sample them, given the prior distributions, taken from Ouder et al, 2013, Neuron
experience_decay_factor = rbeta(1, 1.2, 1.2)
payoff_decay_factor = rbeta(1, 1.2, 1.2)
inverse_temperature = rnorm(1, 0, 10)
# define weightings of probability of good or bad outcome for each choice
# assuming choice between two stimuli, a 'blue' and an 'orange'
choices = c("blue", "orange")
outcome_probs_blue = c(.8, .2) # blue is good
outcome_probs_orange = c(.2, .8) # orange is bad
outcome_probs = matrix(c(outcome_probs_blue, outcome_probs_orange), nrow = 2, ncol = 2)
# set up empty vectors to collect generated data
choice = c() # empty vector for choices
choice_values = c()
experience_weights = c()
outcomes = c() # empty vector for outcomes
ntrials = 50 # will do 50 before switching
start_choice_values = .1 # to update from, the first time a stimulus is chosen or experienced
start_exp_weights = .1
###############################################################################################################################
# run simulation
###############################################################################################################################
for (i in 1:ntrials){
# get the choice made on trial i
if (i == 1){
# assuming first choice is 50:50, 0 is blue, 1 is orange
choice[i] = sample(choices, 1, prob = c(.5, .5) ) # choice on the 1st trial is a .5/.5 shot
} else {
choice[i] = sample(choices, 1, prob = next_trials_action_probs)
}
# get the outcome for the choice that was just made
outcomes[i] = get_trial_outcome(choice[i], outcome_probs) # get the outcome for the current trial
# now update the choice value based on the outcome
# first, get the values for last time you encountered each stimulus
if( i == 1 ) { # if neither stimulus has been chosen before, get the starting values for update
tmp_choice_values = c( start_choice_values, start_choice_values )
tmp_experience_weights = c( start_exp_weights, start_exp_weights )
} else {
tmp_choice_values = choice_values[c(max(which(choice[1:(i-1)] == "blue")), max(which(choice[1:(i-1)] == "orange")))]
tmp_choice_values[is.na(tmp_choice_values)] = start_choice_values # just in case one has not assigned a value yet
tmp_experience_weights = experience_weights[ c(max(which(choice[1:(i-1)] == "blue")), max(which(choice[1:(i-1)] == "orange")))  ] # get the experience weights from your last encounter with each choice stimulus
tmp_experience_weights[is.na(tmp_experience_weights)] = start_exp_weights
}
# now select and update the choice value and experience weights for the stimulus-outcome pairing you just experienced
choice_value_for_update = tmp_choice_values[ which(choices == choice[i])   ]
experience_weight_for_update = tmp_experience_weights[ which( choices == choice[i]) ]
# now we update the choice values and the experience weights for the last thing you did
new_choice_list = ewa_update( experience_decay_factor, payoff_decay_factor, experience_weight_for_update, choice_value_for_update, outcomes[i] )
# these are the values that reflect your most up to date experience which you should keep for next time
choice_values[i] = new_choice_list$choice_value # update the thing you chose last time with the new choice value
experience_weights[i] = new_choice_list$experience_weight #
# assign to the choice values to be compared for next action generation
tmp_choice_values[ which(choices == choice[i])   ] = choice_values[i]
# feed in to get action probabilities
next_trials_action_probs = c( action_selection( tmp_choice_values[1], tmp_choice_values[2], inverse_temperature ), action_selection(  tmp_choice_values[2], tmp_choice_values[1], inverse_temperature   ) )
}
###############################################################################################################################
# make into a dataframe and save to wideform for further use
###############################################################################################################################
data <- data.frame(choices = choice, outcomes = outcomes)
write.csv(data, "EWA_example.csv")
# written by K. Garner, 2019
# this code is written to simulate behaviour, using the experience weighted model (Ouden et al, 2013, Neuron)
# by using this code, and pre-defining the parameters that would typically be obtained through model fitting,
# we can generate data knowing "ground truth" and therefore check the model fitting software recovers the correct parameters
# this code is written for readability over effieciency
rm(list=ls())
###############################################################################################################################
# define model functions
rp_update <- function(punishment_learn_rate, reward_learn_rate, choice_value_last_trial, outcome_last_trial){
# update the choice value for the choice made on the last trial, given the outcome of the last trial by adding to the value for the given choice on the
# previous trial, the punishment learning rate weighted by the difference between the outcome and the choice value from the last trial (if it was a punishment trial), or the reward learning rate
# weighted by the difference between the previous value and outcome
# first assess whether the current trial is a punishment (0) or a reward trial (1), and set punishment and reward learn rates appropriately
if (!any(as.logical(outcome_last_trial))) {
punish = punishment_learn_rate
reward = 0
} else {
punish = 0
reward = reward_learn_rate
}
choice_value_this_trial = choice_value_last_trial + ( punish * (  outcome_last_trial - choice_value_last_trial ) ) + ( reward * (  outcome_last_trial - choice_value_last_trial ) )
choice_value_this_trial
}
action_selection <- function( choice_value, other_choice_value, inverse_temperature ){
# compute the probability of choice, given the value for that choice, the value for the other choice, and the
# inverse temperature parameter -
probability_choice = exp( inverse_temperature*choice_value  ) / sum( exp( inverse_temperature*choice_value ), exp( inverse_temperature*other_choice_value ) )
probability_choice
}
get_trial_outcome <- function( choice, outcome_probs ){
# sample the reward distribution lying beneath the choice,
if (choice == "blue"){
idx = 1
} else if (choice == "orange"){
idx = 2
}
outcome = sample(c(1, 0), 1, prob = outcome_probs[, idx])
outcome
}
###############################################################################################################################
# now define parameters for simulation
###############################################################################################################################
# define the model parameters
# I have chosen to randomly sample them, given the prior distributions, taken from Ouder et al, 2013, Neuron
punishment_learn_rate = rbeta(1, 1.2, 1.2)
reward_learn_rate = rbeta(1, 1.2, 1.2)
inverse_temperature = 1 #rnorm(1, 0, 10)
# define weightings of probability of good or bad outcome for each choice
# assuming choice between two stimuli, a 'blue' and an 'orange'
choices = c("blue", "orange")
outcome_probs_blue = c(.8, .2) # blue is good
outcome_probs_orange = c(.5, .5) # orange is even
outcome_probs = matrix(c(outcome_probs_blue, outcome_probs_orange), nrow = 2, ncol = 2)
# define the number of trials and switch points
ntrials = 100
switch = c(50) # this is an n length vector for n switches - eg. to switch on trials 50 % 100: switch = c(50, 100)
# start dataframe to collect data
data = data.frame( t = c(1, rep(NA, ntrials-1 )),
blue_choice_value = c(.5, rep(NA, ntrials-1)),
orange_choice_value = c(.5, rep(NA, ntrials-1)),
p_blue = rep(NA, ntrials),
p_orange = rep(NA, ntrials),
this_trial_action = rep(NA, ntrials),
this_trial_outcome = rep(NA, ntrials))
###############################################################################################################################
# run simulation
###############################################################################################################################
for (i in 1:ntrials){
# are the probabilities switching?
if (i %in% switch) outcome_probs = outcome_probs[, c(2,1)]
# is it the first trial?, if not, update based on last trial
if (i > 1){
# do update here
data$t[i] = i # assign new trial number
last_choice = choices[match( data$this_trial_action[i-1], choices)] # get last choice
last_unchosen = choices[which( data$this_trial_action[i-1] != choices  )] # same, but for unchosen
# now get the value updates for chosen and unchosen
data[i, charmatch(last_choice, colnames(data))] = rp_update( punishment_learn_rate, reward_learn_rate, data[i-1, charmatch(last_choice, colnames(data))], data$this_trial_outcome[i-1] )
data[i, charmatch(last_unchosen, colnames(data))] =  data[i-1, charmatch(last_unchosen, colnames(data))]
}
# generate choice based on current trial's values
data$p_blue[i] = with(data, action_selection(blue_choice_value[i], orange_choice_value[i], inverse_temperature) )
data$p_orange[i] = 1-data$p_blue[i]
data$this_trial_action[i] = sample( choices, 1, prob=c(data$p_blue[i], data$p_orange[i]) )
data$this_trial_outcome[i] = with(data, (get_trial_outcome( this_trial_action[i], outcome_probs ) ) )
}
###############################################################################################################################
# make into a dataframe and save to wideform for further use
###############################################################################################################################
write.csv(data, "RP_example.csv")
# this code is written for readability over effieciency
rm(list=ls())
ewa_update <- function(experience_decay_factor, payoff_decay_factor, last_experience_weight, last_choice_value, previous_outcome){
# given an experience decay factor, and  a payoff_decay _factor, compute the
# experience weight and the value for the choice, given the value, weight and outcome
# for the previous choice
experience_weight = last_experience_weight * experience_decay_factor + 1
choice_value = (last_choice_value * payoff_decay_factor * last_experience_weight + previous_outcome) / experience_weight
out = list( choice_value = choice_value, experience_weight = experience_weight )
out
}
# first set wd to current and source the file with the EWA function
setwd(getSrcDirectory()[1])
getSrcDirectory()
# first set wd to current and source the file with the EWA function
setwd(utils::getSrcDirectory()[1])
# -------------------------------------------------------------------------------------------------------------------------
# install required packages
install.packages(c("rstudioapi", "tidyverse")
)
library("tidyverse")
library(tidyverse)
# set wd to current and source the file with the EWA function
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rstudioapi::getActiveDocumentContext()
rstudioapi::getActiveDocumentContext()$path
# set wd to current and source the file with the EWA function
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("EWA.R")
rm(list=ls())
? rbeta
x = seq(-3,3, by = .1)
plot(x, dbeta(1.2, 1.2))
plot(x, dbeta(x,1.2, 1.2))
prior_dat <- data.frame(x=seq(-1, 1, by=.1),
prior=dbeta(x, 1.2, 1.2))
prior_dat <- data.frame(x=seq(-1, 1, by=.1)) %>%
mutate(prior=dbeta(x, 1.2, 1.2)))
# plotting prior
prior_dat <- data.frame(x=seq(-1, 1, by=.1)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
prior_dat <- data.frame(x=seq(-1, 1, by=.1)) %>%
mutate(prior=dbeta(x, 1.2, 1.2)) %>%
ggplot(aes(x=x, y=prior)) + geom_denisty() +
ggtitle("prior distribution for experience weight parameter")
prior_dat <- data.frame(x=seq(-1, 1, by=.1)) %>%
mutate(prior=dbeta(x, 1.2, 1.2)) %>%
ggplot(aes(x=x, y=prior)) + geom_density() +
ggtitle("prior distribution for experience weight parameter")
prior_dat
ggplot(prior_dat, aes(x=x, y=prior)) + geom_density() +  ggtitle("prior distribution for experience weight parameter")
prior_dat <- data.frame(x=seq(-1, 1, by=.1)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
ggplot(prior_dat, aes(x=x, y=prior)) + geom_density() +  ggtitle("prior distribution for experience weight parameter")
View(prior_dat)
prior_dat <- data.frame(x=seq(-1, 1, by=.01)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
prior_dat <- data.frame(x=seq(-1, 1, by=.01)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
with(prior_dat, plot(x, prior), type="l", main="prior distribution for decay parameter", xlab="experience weight", ylab="probability")
# load packages
library(tidyverse)
# set wd to current
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# FUNCTIONS
# -------------------------------------------------------------------------------------------------------------------------
update_experience_weight <- function(previous_experience_weight, decay_factor){
experience_weight = previous_experience_weight * decay_factor + 1
}
# SET DECAY FACTORS TO TEST OVER
# ------------------------------------------------------------------------------------------------------------------------
# going to test 10 possible decay factors from 0 < x < 1, given the prior set by den Ouden et al (2013)
# plotting prior
prior_dat <- data.frame(x=seq(-1, 2, by=.01)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
with(prior_dat, plot(x, prior, type="l", main="prior distribution for decay parameter", xlab="experience weight", ylab="probability"))
experience_decay_factors = seq(0.1, .9, by=10)
experience_decay_factors = seq(0.1, .9, by=.1)
# RUN EACH DECAY FACTOR OVER 1000 TRIALS
# ------------------------------------------------------------------------------------------------------------------------
trials = rep(0, times = 1000)
rep(t(experience_decay_factors), times = 1000)
# RUN EACH DECAY FACTOR OVER 1000 TRIALS, FOR THE SPECIFIED EXP DECAY FACTORS
# ------------------------------------------------------------------------------------------------------------------------
experience_weights_across_trials = rep(t(experience_decay_factors), times = 1000)
experience_weights_across_trials = matrix( rep(experience_decay_factors, times=ntrials), nrow=length(experience_decay_factors), ncol=ntrials)
ntrials = 1000
experience_weights_across_trials = matrix( rep(experience_decay_factors, times=ntrials), nrow=length(experience_decay_factors), ncol=ntrials)
View(experience_weights_across_trials)
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(prior, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials
}
# RUN EACH DECAY FACTOR OVER 1000 TRIALS, FOR THE SPECIFIED EXP DECAY FACTORS
# ------------------------------------------------------------------------------------------------------------------------
ntrials = 1000
sapply(experience_decay_factors, run_simulations, ntrials=ntrials)
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials
}
prior_dat <- data.frame(x=seq(-1, 2, by=.01)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
with(prior_dat, plot(x, prior, type="l", main="prior distribution for decay parameter", xlab="experience weight", ylab="probability"))
experience_decay_factors = seq(0.1, .9, by=.1)
# RUN EACH DECAY FACTOR OVER 1000 TRIALS, FOR THE SPECIFIED EXP DECAY FACTORS
# ------------------------------------------------------------------------------------------------------------------------
ntrials = 1000
sapply(experience_decay_factors, run_simulations, ntrials=ntrials)
# FUNCTIONS
# -------------------------------------------------------------------------------------------------------------------------
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = previous_experience_weight * (decay_factor + 1)
}
sapply(experience_decay_factors, run_simulations, ntrials=ntrials)
lapply(experience_decay_factors, run_simulations, ntrials=ntrials)
do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
test = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = data.frame(weights=experience_weights_across_trials,
prior = decay_factor)
}
test = sapply(experience_decay_factors, run_simulations, ntrials=ntrials)
head(test[[1]])
head(test[1])
? data.frame
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = (previous_experience_weight * decay_factor) + 1
}
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = data.frame(weights=experience_weights_across_trials,
prior = decay_factor)
}
test = sapply(experience_decay_factors, run_simulations, ntrials=ntrials)
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = as.data.frame(weights=experience_weights_across_trials,
prior = decay_factor)
}
test = sapply(experience_decay_factors, run_simulations, ntrials=ntrials)
(1.06 * .02)
(1.06 * .02) + 1
(1.06 * .2) + 1
1.2 * .2
.24 + 1
1.24 * .2 + 1
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = (previous_experience_weight * decay_factor) + 1
}
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = as.data.frame(weights=experience_weights_across_trials,
prior = decay_factor)
}
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = (previous_experience_weight * decay_factor) + 1
}
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = as.data.frame(weights=experience_weights_across_trials,
prior = decay_factor)
}
# written by K. Garner, 2020
# this code simulates possible outcomes for experience weights, given decay factors
rm(list=ls())
library(tidyverse)
# set wd to current
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = (previous_experience_weight * decay_factor) + 1
}
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = data.frame(weights=experience_weights_across_trials,
prior = decay_factor)
}
prior_dat <- data.frame(x=seq(-1, 2, by=.01)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
with(prior_dat, plot(x, prior, type="l", main="prior distribution for decay parameter", xlab="experience weight", ylab="probability"))
experience_decay_factors = seq(0.1, .9, by=.1)
# RUN EACH DECAY FACTOR OVER 1000 TRIALS, FOR THE SPECIFIED EXP DECAY FACTORS
# ------------------------------------------------------------------------------------------------------------------------
ntrials = 1000
test = sapply(experience_decay_factors, run_simulations, ntrials=ntrials)
test = do.call(rbind, sapply(experience_decay_factors, run_simulations, ntrials=ntrials))
experience_decay_factors
? sapply
test = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
test = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials)) %>%
as_factor(prior)
simulation_output = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
simulation_output %>% as_factor(prior)
simulation_output$prior <- as.factor(simultaion_output$prior)
simulation_output = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
simulation_output$prior <- as.factor(simultaion_output$prior)
simulation_output = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
simulation_output$prior <- as.factor(simulation_output$prior)
head(simulation_output)
# written by K. Garner, 2020
# this code simulates possible outcomes for experience weights, given decay factors
rm(list=ls())
# PACKAGES AND SOURCE FILES
# -------------------------------------------------------------------------------------------------------------------------
# install required packages
# install.packages(c("rstudioapi", "tidyverse")) # uncomment and run this line if you don't have the packages installed
# load packages
library(tidyverse)
# set wd to current
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# FUNCTIONS
# -------------------------------------------------------------------------------------------------------------------------
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = (previous_experience_weight * decay_factor) + 1
}
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(decay_factor, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = data.frame(t = 1:length(experience_weights_across_trials),
weights=experience_weights_across_trials,
prior = decay_factor)
}
# SET DECAY FACTORS TO TEST OVER
# ------------------------------------------------------------------------------------------------------------------------
# going to test 10 possible decay factors from 0 < x < 1, given the prior set by den Ouden et al (2013)
# plotting prior
prior_dat <- data.frame(x=seq(-1, 2, by=.01)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
with(prior_dat, plot(x, prior, type="l", main="prior distribution for decay parameter", xlab="experience weight", ylab="probability"))
experience_decay_factors = seq(0.1, .9, by=.1)
# RUN EACH DECAY FACTOR OVER 1000 TRIALS, FOR THE SPECIFIED EXP DECAY FACTORS
# ------------------------------------------------------------------------------------------------------------------------
ntrials = 1000
simulation_output = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
simulation_output$prior <- as.factor(simulation_output$prior)
# PLOT EACH SIMULATION
# ------------------------------------------------------------------------------------------------------------------------
simulation_output %>% ggplot(aes(x=t, y=weights, group=prior)) + geom_line(aes(color=prior)) + facet_wrap(~prior)
0*0.1 +1
1*0.1 +1
1.1*0.1 +1
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = (previous_experience_weight * decay_factor) + 1
}
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(0, times=ntrials)
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = data.frame(t = 1:length(experience_weights_across_trials),
weights=experience_weights_across_trials,
prior = decay_factor)
}
update_experience_weight <- function(previous_experience_weight, decay_factor){
# use this function to compute one experience weight update, given a decay factor
experience_weight = (previous_experience_weight * decay_factor) + 1
}
run_simulations <- function(decay_factor, ntrials){
# use this function to update experience weights over the total number of ntrials and a given prior decay factor
experience_weights_across_trials = rep(0, times=ntrials) # set initial experience weight to 0, given
# description of parameter around equation 2.1 in https://onlinelibrary.wiley.com/doi/epdf/10.1111/1468-0262.00054
for (i in 2:length(experience_weights_across_trials)){
experience_weights_across_trials[i] = update_experience_weight( experience_weights_across_trials[i-1], decay_factor)
}
experience_weights_across_trials = data.frame(t = 1:length(experience_weights_across_trials),
weights=experience_weights_across_trials,
prior = decay_factor)
}
# SET DECAY FACTORS TO TEST OVER
# ------------------------------------------------------------------------------------------------------------------------
# going to test 10 possible decay factors from 0 < x < 1, given the prior set by den Ouden et al (2013)
# plotting prior
prior_dat <- data.frame(x=seq(-1, 2, by=.01)) %>%
mutate(prior=dbeta(x, 1.2, 1.2))
with(prior_dat, plot(x, prior, type="l", main="prior distribution for decay parameter", xlab="experience weight", ylab="probability"))
experience_decay_factors = seq(0.1, .9, by=.1)
# RUN EACH DECAY FACTOR OVER 1000 TRIALS, FOR THE SPECIFIED EXP DECAY FACTORS
# ------------------------------------------------------------------------------------------------------------------------
ntrials = 1000
simulation_output = do.call(rbind, lapply(experience_decay_factors, run_simulations, ntrials=ntrials))
simulation_output$prior <- as.factor(simulation_output$prior)
# PLOT EACH SIMULATION
# ------------------------------------------------------------------------------------------------------------------------
simulation_output %>% ggplot(aes(x=t, y=weights, group=prior)) + geom_line(aes(color=prior)) + facet_wrap(~prior)
i = 0
for count = c(1:1000) {i = i*.1 + 1}
for (count = c(1:1000)) {i = i*.1 + 1}
for (count in c(1:1000)) {i = i*.1 + 1}
i
i = 0
for (count in c(1:1000)) {i = i*.1 + 1, print(i)}
for (count in c(1:1000)) {
i = i*.1 + 1,
print(i)}
for (count in c(1:1000)) {
i = i*.1 + 1
print(i)
}
0*0.1+1
1*0.1+1
1.1*0.1+1
1.11*0.1+1
1.111*0.1+1
1.1111*0.1+1
1.11111*0.1+1
1.111111*0.1+1
1.1111111*0.1+1
1.1111111*0.1
+1
